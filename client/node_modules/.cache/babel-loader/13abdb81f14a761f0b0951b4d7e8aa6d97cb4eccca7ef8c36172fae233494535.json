{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useNavigate } from 'react-router-dom';\n\n// Constants for timeout durations (in milliseconds)\nconst INACTIVITY_TIMEOUT = 15 * 60 * 1000; // 15 minutes\nconst WARNING_DURATION = 60 * 1000; // 60 seconds\n\n// Events to track for user activity\nconst USER_ACTIVITY_EVENTS = ['mousedown', 'mousemove', 'keydown', 'scroll', 'touchstart', 'click'];\n\n// Hook to manage inactivity timeout\nexport const useInactivityTimeout = () => {\n  _s();\n  const [showWarning, setShowWarning] = useState(false);\n  const [warningTime, setWarningTime] = useState(0);\n  const {\n    logout\n  } = useAuth();\n  const navigate = useNavigate();\n\n  // Reset timers when user shows activity\n  const resetTimers = () => {\n    setShowWarning(false);\n\n    // Clear existing timers if any\n    if (window.inactivityTimer) clearTimeout(window.inactivityTimer);\n    if (window.warningTimer) clearTimeout(window.warningTimer);\n\n    // Set a new inactivity timer\n    window.inactivityTimer = setTimeout(() => {\n      setShowWarning(true);\n      setWarningTime(Date.now() + WARNING_DURATION);\n\n      // Set warning timer for auto-logout\n      window.warningTimer = setTimeout(() => {\n        handleLogout();\n      }, WARNING_DURATION);\n    }, INACTIVITY_TIMEOUT);\n  };\n\n  // Handle logout action\n  const handleLogout = () => {\n    logout();\n    setShowWarning(false);\n    navigate('/login');\n  };\n\n  // Continue the session\n  const continueSession = () => {\n    resetTimers();\n  };\n\n  // Set up event listeners\n  useEffect(() => {\n    // User activity event handler\n    const handleUserActivity = () => {\n      if (!showWarning) {\n        resetTimers();\n      }\n    };\n\n    // Register all event listeners\n    USER_ACTIVITY_EVENTS.forEach(eventType => {\n      window.addEventListener(eventType, handleUserActivity);\n    });\n\n    // Initial timer setup\n    resetTimers();\n\n    // Cleanup event listeners on unmount\n    return () => {\n      USER_ACTIVITY_EVENTS.forEach(eventType => {\n        window.removeEventListener(eventType, handleUserActivity);\n      });\n\n      // Clear timers\n      if (window.inactivityTimer) clearTimeout(window.inactivityTimer);\n      if (window.warningTimer) clearTimeout(window.warningTimer);\n    };\n  }, [showWarning]);\n  return {\n    showWarning,\n    warningTime,\n    continueSession,\n    handleLogout\n  };\n};\n_s(useInactivityTimeout, \"dw5G1PKSOwpIX4RMwF22qSJA17k=\", false, function () {\n  return [useAuth, useNavigate];\n});","map":{"version":3,"names":["useEffect","useState","useAuth","useNavigate","INACTIVITY_TIMEOUT","WARNING_DURATION","USER_ACTIVITY_EVENTS","useInactivityTimeout","_s","showWarning","setShowWarning","warningTime","setWarningTime","logout","navigate","resetTimers","window","inactivityTimer","clearTimeout","warningTimer","setTimeout","Date","now","handleLogout","continueSession","handleUserActivity","forEach","eventType","addEventListener","removeEventListener"],"sources":["/Users/brandonhughes/Construction-Scheduler/client/src/services/timeout.service.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useNavigate } from 'react-router-dom';\n\n// Constants for timeout durations (in milliseconds)\nconst INACTIVITY_TIMEOUT = 15 * 60 * 1000; // 15 minutes\nconst WARNING_DURATION = 60 * 1000; // 60 seconds\n\n// Events to track for user activity\nconst USER_ACTIVITY_EVENTS = [\n  'mousedown', 'mousemove', 'keydown', \n  'scroll', 'touchstart', 'click'\n];\n\n// Hook to manage inactivity timeout\nexport const useInactivityTimeout = () => {\n  const [showWarning, setShowWarning] = useState(false);\n  const [warningTime, setWarningTime] = useState(0);\n  const { logout } = useAuth();\n  const navigate = useNavigate();\n  \n  // Reset timers when user shows activity\n  const resetTimers = () => {\n    setShowWarning(false);\n    \n    // Clear existing timers if any\n    if (window.inactivityTimer) clearTimeout(window.inactivityTimer);\n    if (window.warningTimer) clearTimeout(window.warningTimer);\n    \n    // Set a new inactivity timer\n    window.inactivityTimer = setTimeout(() => {\n      setShowWarning(true);\n      setWarningTime(Date.now() + WARNING_DURATION);\n      \n      // Set warning timer for auto-logout\n      window.warningTimer = setTimeout(() => {\n        handleLogout();\n      }, WARNING_DURATION);\n    }, INACTIVITY_TIMEOUT);\n  };\n  \n  // Handle logout action\n  const handleLogout = () => {\n    logout();\n    setShowWarning(false);\n    navigate('/login');\n  };\n  \n  // Continue the session\n  const continueSession = () => {\n    resetTimers();\n  };\n  \n  // Set up event listeners\n  useEffect(() => {\n    // User activity event handler\n    const handleUserActivity = () => {\n      if (!showWarning) {\n        resetTimers();\n      }\n    };\n    \n    // Register all event listeners\n    USER_ACTIVITY_EVENTS.forEach(eventType => {\n      window.addEventListener(eventType, handleUserActivity);\n    });\n    \n    // Initial timer setup\n    resetTimers();\n    \n    // Cleanup event listeners on unmount\n    return () => {\n      USER_ACTIVITY_EVENTS.forEach(eventType => {\n        window.removeEventListener(eventType, handleUserActivity);\n      });\n      \n      // Clear timers\n      if (window.inactivityTimer) clearTimeout(window.inactivityTimer);\n      if (window.warningTimer) clearTimeout(window.warningTimer);\n    };\n  }, [showWarning]);\n  \n  return {\n    showWarning,\n    warningTime,\n    continueSession,\n    handleLogout\n  };\n};"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,kBAAkB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;AAC3C,MAAMC,gBAAgB,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;AAEpC;AACA,MAAMC,oBAAoB,GAAG,CAC3B,WAAW,EAAE,WAAW,EAAE,SAAS,EACnC,QAAQ,EAAE,YAAY,EAAE,OAAO,CAChC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM;IAAEY;EAAO,CAAC,GAAGX,OAAO,CAAC,CAAC;EAC5B,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMY,WAAW,GAAGA,CAAA,KAAM;IACxBL,cAAc,CAAC,KAAK,CAAC;;IAErB;IACA,IAAIM,MAAM,CAACC,eAAe,EAAEC,YAAY,CAACF,MAAM,CAACC,eAAe,CAAC;IAChE,IAAID,MAAM,CAACG,YAAY,EAAED,YAAY,CAACF,MAAM,CAACG,YAAY,CAAC;;IAE1D;IACAH,MAAM,CAACC,eAAe,GAAGG,UAAU,CAAC,MAAM;MACxCV,cAAc,CAAC,IAAI,CAAC;MACpBE,cAAc,CAACS,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGjB,gBAAgB,CAAC;;MAE7C;MACAW,MAAM,CAACG,YAAY,GAAGC,UAAU,CAAC,MAAM;QACrCG,YAAY,CAAC,CAAC;MAChB,CAAC,EAAElB,gBAAgB,CAAC;IACtB,CAAC,EAAED,kBAAkB,CAAC;EACxB,CAAC;;EAED;EACA,MAAMmB,YAAY,GAAGA,CAAA,KAAM;IACzBV,MAAM,CAAC,CAAC;IACRH,cAAc,CAAC,KAAK,CAAC;IACrBI,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;;EAED;EACA,MAAMU,eAAe,GAAGA,CAAA,KAAM;IAC5BT,WAAW,CAAC,CAAC;EACf,CAAC;;EAED;EACAf,SAAS,CAAC,MAAM;IACd;IACA,MAAMyB,kBAAkB,GAAGA,CAAA,KAAM;MAC/B,IAAI,CAAChB,WAAW,EAAE;QAChBM,WAAW,CAAC,CAAC;MACf;IACF,CAAC;;IAED;IACAT,oBAAoB,CAACoB,OAAO,CAACC,SAAS,IAAI;MACxCX,MAAM,CAACY,gBAAgB,CAACD,SAAS,EAAEF,kBAAkB,CAAC;IACxD,CAAC,CAAC;;IAEF;IACAV,WAAW,CAAC,CAAC;;IAEb;IACA,OAAO,MAAM;MACXT,oBAAoB,CAACoB,OAAO,CAACC,SAAS,IAAI;QACxCX,MAAM,CAACa,mBAAmB,CAACF,SAAS,EAAEF,kBAAkB,CAAC;MAC3D,CAAC,CAAC;;MAEF;MACA,IAAIT,MAAM,CAACC,eAAe,EAAEC,YAAY,CAACF,MAAM,CAACC,eAAe,CAAC;MAChE,IAAID,MAAM,CAACG,YAAY,EAAED,YAAY,CAACF,MAAM,CAACG,YAAY,CAAC;IAC5D,CAAC;EACH,CAAC,EAAE,CAACV,WAAW,CAAC,CAAC;EAEjB,OAAO;IACLA,WAAW;IACXE,WAAW;IACXa,eAAe;IACfD;EACF,CAAC;AACH,CAAC;AAACf,EAAA,CAzEWD,oBAAoB;EAAA,QAGZL,OAAO,EACTC,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}