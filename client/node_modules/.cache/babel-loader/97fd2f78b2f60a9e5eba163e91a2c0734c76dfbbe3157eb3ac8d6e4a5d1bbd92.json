{"ast":null,"code":"import React,{createContext,useState,useEffect,useContext}from'react';import AuthService from'../services/auth.service';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>useContext(AuthContext);export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const loadUser=async()=>{try{if(AuthService.isAuthenticated()){const user=await AuthService.getCurrentUser();setCurrentUser(user);}}catch(err){console.error('Failed to load user',err);AuthService.logout();}finally{setLoading(false);}};loadUser();},[]);const login=async(email,password)=>{try{setError(null);const data=await AuthService.login(email,password);setCurrentUser(data.user);return data;}catch(err){setError(err.message||'Failed to login');throw err;}};const register=async userData=>{try{setError(null);const data=await AuthService.register(userData);setCurrentUser(data.user);return data;}catch(err){setError(err.message||'Failed to register');throw err;}};const logout=()=>{AuthService.logout();setCurrentUser(null);};const updateProfile=userData=>{setCurrentUser({...currentUser,...userData});};const value={currentUser,loading,error,login,register,logout,updateProfile,isAuthenticated:AuthService.isAuthenticated};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","AuthService","jsx","_jsx","AuthContext","useAuth","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","error","setError","loadUser","isAuthenticated","user","getCurrentUser","err","console","logout","login","email","password","data","message","register","userData","updateProfile","value","Provider"],"sources":["/Users/brandonhughes/Construction-Scheduler/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport AuthService from '../services/auth.service';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        if (AuthService.isAuthenticated()) {\n          const user = await AuthService.getCurrentUser();\n          setCurrentUser(user);\n        }\n      } catch (err) {\n        console.error('Failed to load user', err);\n        AuthService.logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      const data = await AuthService.login(email, password);\n      setCurrentUser(data.user);\n      return data;\n    } catch (err) {\n      setError(err.message || 'Failed to login');\n      throw err;\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setError(null);\n      const data = await AuthService.register(userData);\n      setCurrentUser(data.user);\n      return data;\n    } catch (err) {\n      setError(err.message || 'Failed to register');\n      throw err;\n    }\n  };\n\n  const logout = () => {\n    AuthService.logout();\n    setCurrentUser(null);\n  };\n\n  const updateProfile = (userData) => {\n    setCurrentUser({ ...currentUser, ...userData });\n  };\n\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateProfile,\n    isAuthenticated: AuthService.isAuthenticated,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,UAAU,KAAQ,OAAO,CAC7E,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEnD,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAQ,OAAO,CAAGA,CAAA,GAAML,UAAU,CAACI,WAAW,CAAC,CAEpD,MAAO,MAAM,CAAAE,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CACpD,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACe,KAAK,CAAEC,QAAQ,CAAC,CAAGhB,QAAQ,CAAC,IAAI,CAAC,CAExCC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAgB,QAAQ,CAAG,KAAAA,CAAA,GAAY,CAC3B,GAAI,CACF,GAAId,WAAW,CAACe,eAAe,CAAC,CAAC,CAAE,CACjC,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAhB,WAAW,CAACiB,cAAc,CAAC,CAAC,CAC/CR,cAAc,CAACO,IAAI,CAAC,CACtB,CACF,CAAE,MAAOE,GAAG,CAAE,CACZC,OAAO,CAACP,KAAK,CAAC,qBAAqB,CAAEM,GAAG,CAAC,CACzClB,WAAW,CAACoB,MAAM,CAAC,CAAC,CACtB,CAAC,OAAS,CACRT,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDG,QAAQ,CAAC,CAAC,CACZ,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAO,KAAK,CAAG,KAAAA,CAAOC,KAAK,CAAEC,QAAQ,GAAK,CACvC,GAAI,CACFV,QAAQ,CAAC,IAAI,CAAC,CACd,KAAM,CAAAW,IAAI,CAAG,KAAM,CAAAxB,WAAW,CAACqB,KAAK,CAACC,KAAK,CAAEC,QAAQ,CAAC,CACrDd,cAAc,CAACe,IAAI,CAACR,IAAI,CAAC,CACzB,MAAO,CAAAQ,IAAI,CACb,CAAE,MAAON,GAAG,CAAE,CACZL,QAAQ,CAACK,GAAG,CAACO,OAAO,EAAI,iBAAiB,CAAC,CAC1C,KAAM,CAAAP,GAAG,CACX,CACF,CAAC,CAED,KAAM,CAAAQ,QAAQ,CAAG,KAAO,CAAAC,QAAQ,EAAK,CACnC,GAAI,CACFd,QAAQ,CAAC,IAAI,CAAC,CACd,KAAM,CAAAW,IAAI,CAAG,KAAM,CAAAxB,WAAW,CAAC0B,QAAQ,CAACC,QAAQ,CAAC,CACjDlB,cAAc,CAACe,IAAI,CAACR,IAAI,CAAC,CACzB,MAAO,CAAAQ,IAAI,CACb,CAAE,MAAON,GAAG,CAAE,CACZL,QAAQ,CAACK,GAAG,CAACO,OAAO,EAAI,oBAAoB,CAAC,CAC7C,KAAM,CAAAP,GAAG,CACX,CACF,CAAC,CAED,KAAM,CAAAE,MAAM,CAAGA,CAAA,GAAM,CACnBpB,WAAW,CAACoB,MAAM,CAAC,CAAC,CACpBX,cAAc,CAAC,IAAI,CAAC,CACtB,CAAC,CAED,KAAM,CAAAmB,aAAa,CAAID,QAAQ,EAAK,CAClClB,cAAc,CAAC,CAAE,GAAGD,WAAW,CAAE,GAAGmB,QAAS,CAAC,CAAC,CACjD,CAAC,CAED,KAAM,CAAAE,KAAK,CAAG,CACZrB,WAAW,CACXE,OAAO,CACPE,KAAK,CACLS,KAAK,CACLK,QAAQ,CACRN,MAAM,CACNQ,aAAa,CACbb,eAAe,CAAEf,WAAW,CAACe,eAC/B,CAAC,CAED,mBAAOb,IAAA,CAACC,WAAW,CAAC2B,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAtB,QAAA,CAAEA,QAAQ,CAAuB,CAAC,CAC9E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}