{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef, useCallback } from 'react';\n\n// Constants for timeout durations (in milliseconds)\nconst INACTIVITY_TIMEOUT = 15 * 60 * 1000; // 15 minutes\nconst WARNING_DURATION = 60 * 1000; // 60 seconds\n\n// Events to track for user activity\nconst USER_ACTIVITY_EVENTS = ['mousedown', 'mousemove', 'keydown', 'scroll', 'touchstart', 'click'];\n\n// Hook to manage inactivity timeout\nexport const useInactivityTimeout = (isAuthenticated, logout, navigate) => {\n  _s();\n  const [showWarning, setShowWarning] = useState(false);\n  const [warningTime, setWarningTime] = useState(0);\n\n  // Use refs to keep track of timers - refs persist across renders\n  const inactivityTimerRef = useRef(null);\n  const warningTimerRef = useRef(null);\n\n  // Use a ref to track if the component is mounted\n  const isMountedRef = useRef(true);\n\n  // Reset timers - use useCallback to memoize this function\n  const resetTimers = useCallback(() => {\n    console.log('Resetting inactivity timers');\n    if (!isMountedRef.current || !isAuthenticated) return;\n\n    // Clear existing timers\n    if (inactivityTimerRef.current) {\n      clearTimeout(inactivityTimerRef.current);\n      inactivityTimerRef.current = null;\n    }\n    if (warningTimerRef.current) {\n      clearTimeout(warningTimerRef.current);\n      warningTimerRef.current = null;\n    }\n    setShowWarning(false);\n\n    // Set a new inactivity timer\n    inactivityTimerRef.current = setTimeout(() => {\n      if (!isMountedRef.current) return;\n      console.log('Inactivity detected! Showing warning...');\n      setShowWarning(true);\n      setWarningTime(Date.now() + WARNING_DURATION);\n\n      // Set warning timer for auto-logout\n      warningTimerRef.current = setTimeout(() => {\n        if (!isMountedRef.current) return;\n        console.log('Warning timeout expired! Logging out...');\n        handleLogout();\n      }, WARNING_DURATION);\n    }, INACTIVITY_TIMEOUT);\n  }, [isAuthenticated]);\n\n  // Handle logout action\n  const handleLogout = useCallback(() => {\n    if (!isMountedRef.current) return;\n    console.log('Logout triggered by inactivity');\n    if (logout) {\n      logout();\n      setShowWarning(false);\n      if (navigate) navigate('/login');\n    }\n  }, [logout, navigate]);\n\n  // Continue the session\n  const continueSession = useCallback(() => {\n    console.log('Session continued by user');\n    resetTimers();\n  }, [resetTimers]);\n\n  // Set up event listeners\n  useEffect(() => {\n    if (!isAuthenticated) return;\n    console.log('Setting up inactivity timeout system');\n    isMountedRef.current = true;\n\n    // User activity event handler\n    const handleUserActivity = () => {\n      if (!isMountedRef.current) return;\n\n      // Only reset timers if the warning isn't showing\n      if (!showWarning) {\n        console.log('User activity detected');\n        resetTimers();\n      }\n    };\n\n    // Register all event listeners\n    USER_ACTIVITY_EVENTS.forEach(eventType => {\n      window.addEventListener(eventType, handleUserActivity, {\n        passive: true\n      });\n    });\n\n    // Initial timer setup\n    resetTimers();\n\n    // Cleanup function\n    return () => {\n      console.log('Cleaning up inactivity timeout system');\n      isMountedRef.current = false;\n\n      // Remove event listeners\n      USER_ACTIVITY_EVENTS.forEach(eventType => {\n        window.removeEventListener(eventType, handleUserActivity);\n      });\n\n      // Clear timers\n      if (inactivityTimerRef.current) {\n        clearTimeout(inactivityTimerRef.current);\n        inactivityTimerRef.current = null;\n      }\n      if (warningTimerRef.current) {\n        clearTimeout(warningTimerRef.current);\n        warningTimerRef.current = null;\n      }\n    };\n  }, [isAuthenticated, resetTimers, showWarning]);\n  return {\n    showWarning,\n    warningTime,\n    continueSession,\n    handleLogout\n  };\n};\n_s(useInactivityTimeout, \"1943MafmBqY3i4uRJ1JaJz27+eA=\");","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","INACTIVITY_TIMEOUT","WARNING_DURATION","USER_ACTIVITY_EVENTS","useInactivityTimeout","isAuthenticated","logout","navigate","_s","showWarning","setShowWarning","warningTime","setWarningTime","inactivityTimerRef","warningTimerRef","isMountedRef","resetTimers","console","log","current","clearTimeout","setTimeout","Date","now","handleLogout","continueSession","handleUserActivity","forEach","eventType","window","addEventListener","passive","removeEventListener"],"sources":["/Users/brandonhughes/Construction-Scheduler/client/src/services/timeout.service.js"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from 'react';\n\n// Constants for timeout durations (in milliseconds)\nconst INACTIVITY_TIMEOUT = 15 * 60 * 1000; // 15 minutes\nconst WARNING_DURATION = 60 * 1000; // 60 seconds\n\n// Events to track for user activity\nconst USER_ACTIVITY_EVENTS = [\n  'mousedown', 'mousemove', 'keydown', \n  'scroll', 'touchstart', 'click'\n];\n\n// Hook to manage inactivity timeout\nexport const useInactivityTimeout = (isAuthenticated, logout, navigate) => {\n  const [showWarning, setShowWarning] = useState(false);\n  const [warningTime, setWarningTime] = useState(0);\n  \n  // Use refs to keep track of timers - refs persist across renders\n  const inactivityTimerRef = useRef(null);\n  const warningTimerRef = useRef(null);\n  \n  // Use a ref to track if the component is mounted\n  const isMountedRef = useRef(true);\n  \n  // Reset timers - use useCallback to memoize this function\n  const resetTimers = useCallback(() => {\n    console.log('Resetting inactivity timers');\n    \n    if (!isMountedRef.current || !isAuthenticated) return;\n    \n    // Clear existing timers\n    if (inactivityTimerRef.current) {\n      clearTimeout(inactivityTimerRef.current);\n      inactivityTimerRef.current = null;\n    }\n    \n    if (warningTimerRef.current) {\n      clearTimeout(warningTimerRef.current);\n      warningTimerRef.current = null;\n    }\n    \n    setShowWarning(false);\n    \n    // Set a new inactivity timer\n    inactivityTimerRef.current = setTimeout(() => {\n      if (!isMountedRef.current) return;\n      \n      console.log('Inactivity detected! Showing warning...');\n      setShowWarning(true);\n      setWarningTime(Date.now() + WARNING_DURATION);\n      \n      // Set warning timer for auto-logout\n      warningTimerRef.current = setTimeout(() => {\n        if (!isMountedRef.current) return;\n        \n        console.log('Warning timeout expired! Logging out...');\n        handleLogout();\n      }, WARNING_DURATION);\n    }, INACTIVITY_TIMEOUT);\n  }, [isAuthenticated]);\n  \n  // Handle logout action\n  const handleLogout = useCallback(() => {\n    if (!isMountedRef.current) return;\n    \n    console.log('Logout triggered by inactivity');\n    if (logout) {\n      logout();\n      setShowWarning(false);\n      if (navigate) navigate('/login');\n    }\n  }, [logout, navigate]);\n  \n  // Continue the session\n  const continueSession = useCallback(() => {\n    console.log('Session continued by user');\n    resetTimers();\n  }, [resetTimers]);\n  \n  // Set up event listeners\n  useEffect(() => {\n    if (!isAuthenticated) return;\n    \n    console.log('Setting up inactivity timeout system');\n    isMountedRef.current = true;\n    \n    // User activity event handler\n    const handleUserActivity = () => {\n      if (!isMountedRef.current) return;\n      \n      // Only reset timers if the warning isn't showing\n      if (!showWarning) {\n        console.log('User activity detected');\n        resetTimers();\n      }\n    };\n    \n    // Register all event listeners\n    USER_ACTIVITY_EVENTS.forEach(eventType => {\n      window.addEventListener(eventType, handleUserActivity, { passive: true });\n    });\n    \n    // Initial timer setup\n    resetTimers();\n    \n    // Cleanup function\n    return () => {\n      console.log('Cleaning up inactivity timeout system');\n      isMountedRef.current = false;\n      \n      // Remove event listeners\n      USER_ACTIVITY_EVENTS.forEach(eventType => {\n        window.removeEventListener(eventType, handleUserActivity);\n      });\n      \n      // Clear timers\n      if (inactivityTimerRef.current) {\n        clearTimeout(inactivityTimerRef.current);\n        inactivityTimerRef.current = null;\n      }\n      \n      if (warningTimerRef.current) {\n        clearTimeout(warningTimerRef.current);\n        warningTimerRef.current = null;\n      }\n    };\n  }, [isAuthenticated, resetTimers, showWarning]);\n  \n  return {\n    showWarning,\n    warningTime,\n    continueSession,\n    handleLogout\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}