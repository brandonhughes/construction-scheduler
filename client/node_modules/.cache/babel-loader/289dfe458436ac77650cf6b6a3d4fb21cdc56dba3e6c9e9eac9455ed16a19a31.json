{"ast":null,"code":"/**\n * Global Inactivity Tracker\n * This is a window-level inactivity tracking system that works independently of React components.\n */\n\n// Configuration\nconst INACTIVITY_TIMEOUT = 20 * 1000; // 20 seconds for testing (use 15 * 60 * 1000 for production)\nconst WARNING_DURATION = 60 * 1000; // 60 seconds\n\n// Events to track for user activity\nconst USER_ACTIVITY_EVENTS = ['mousedown', 'mousemove', 'keydown', 'scroll', 'touchstart', 'click'];\n\n// Global state\nlet inactivityTimer = null;\nlet warningTimer = null;\nlet warningCallback = null;\nlet logoutCallback = null;\nlet isWarningShown = false;\nlet warningTimeout = 0;\nlet isInitialized = false;\n\n// Utility to reset timers\nconst resetInactivityTimer = () => {\n  console.log('[InactivityTracker] Resetting inactivity timer');\n\n  // Clear existing timers\n  if (inactivityTimer) {\n    clearTimeout(inactivityTimer);\n  }\n\n  // Don't reset warning timer if warning is showing\n  if (isWarningShown) {\n    console.log('[InactivityTracker] Warning is showing, not resetting warning timer');\n    return;\n  }\n\n  // Clear warning timer\n  if (warningTimer) {\n    clearTimeout(warningTimer);\n  }\n\n  // Hide warning if it's showing\n  if (isWarningShown) {\n    isWarningShown = false;\n    if (warningCallback) {\n      warningCallback(false, 0);\n    }\n  }\n\n  // Set new inactivity timer\n  inactivityTimer = setTimeout(() => {\n    console.log('[InactivityTracker] Inactivity detected! Showing warning...');\n\n    // Show warning\n    isWarningShown = true;\n    warningTimeout = Date.now() + WARNING_DURATION;\n    if (warningCallback) {\n      warningCallback(true, warningTimeout);\n    }\n\n    // Set warning timer\n    warningTimer = setTimeout(() => {\n      console.log('[InactivityTracker] Warning timeout expired! Logging out...');\n\n      // Reset state\n      isWarningShown = false;\n\n      // Execute logout callback\n      if (logoutCallback) {\n        logoutCallback();\n      }\n    }, WARNING_DURATION);\n  }, INACTIVITY_TIMEOUT);\n};\n\n// User activity event handler\nconst handleUserActivity = () => {\n  console.log('[InactivityTracker] Activity detected');\n\n  // Only reset if warning is not showing\n  if (!isWarningShown) {\n    resetInactivityTimer();\n  }\n};\n\n// Initialize the tracker\nexport const initInactivityTracker = (onWarning, onLogout) => {\n  console.log('[InactivityTracker] Initializing inactivity tracker');\n\n  // Only initialize once\n  if (isInitialized) {\n    console.log('[InactivityTracker] Already initialized, updating callbacks');\n    warningCallback = onWarning;\n    logoutCallback = onLogout;\n    return;\n  }\n\n  // Store callbacks\n  warningCallback = onWarning;\n  logoutCallback = onLogout;\n\n  // Register all event listeners\n  USER_ACTIVITY_EVENTS.forEach(eventType => {\n    console.log(`[InactivityTracker] Adding event listener for: ${eventType}`);\n    window.addEventListener(eventType, handleUserActivity, {\n      passive: true\n    });\n  });\n\n  // Initial timer setup\n  resetInactivityTimer();\n\n  // Mark as initialized\n  isInitialized = true;\n  console.log('[InactivityTracker] Initialization complete');\n};\n\n// Clean up the tracker\nexport const cleanupInactivityTracker = () => {\n  console.log('[InactivityTracker] Cleaning up inactivity tracker');\n\n  // Remove event listeners\n  USER_ACTIVITY_EVENTS.forEach(eventType => {\n    window.removeEventListener(eventType, handleUserActivity);\n  });\n\n  // Clear timers\n  if (inactivityTimer) {\n    clearTimeout(inactivityTimer);\n    inactivityTimer = null;\n  }\n  if (warningTimer) {\n    clearTimeout(warningTimer);\n    warningTimer = null;\n  }\n\n  // Reset state\n  isWarningShown = false;\n  warningCallback = null;\n  logoutCallback = null;\n  isInitialized = false;\n  console.log('[InactivityTracker] Cleanup complete');\n};\n\n// Continue session (dismiss warning)\nexport const continueSession = () => {\n  console.log('[InactivityTracker] Continuing session');\n  isWarningShown = false;\n  if (warningCallback) {\n    warningCallback(false, 0);\n  }\n  resetInactivityTimer();\n};\n\n// For testing purposes\nexport const forceShowWarning = () => {\n  console.log('[InactivityTracker] Forcing warning display (test)');\n  isWarningShown = true;\n  warningTimeout = Date.now() + WARNING_DURATION;\n  if (warningCallback) {\n    warningCallback(true, warningTimeout);\n  }\n};","map":{"version":3,"names":["INACTIVITY_TIMEOUT","WARNING_DURATION","USER_ACTIVITY_EVENTS","inactivityTimer","warningTimer","warningCallback","logoutCallback","isWarningShown","warningTimeout","isInitialized","resetInactivityTimer","console","log","clearTimeout","setTimeout","Date","now","handleUserActivity","initInactivityTracker","onWarning","onLogout","forEach","eventType","window","addEventListener","passive","cleanupInactivityTracker","removeEventListener","continueSession","forceShowWarning"],"sources":["/Users/brandonhughes/Construction-Scheduler/client/src/services/inactivity-tracker.js"],"sourcesContent":["/**\n * Global Inactivity Tracker\n * This is a window-level inactivity tracking system that works independently of React components.\n */\n\n// Configuration\nconst INACTIVITY_TIMEOUT = 20 * 1000; // 20 seconds for testing (use 15 * 60 * 1000 for production)\nconst WARNING_DURATION = 60 * 1000; // 60 seconds\n\n// Events to track for user activity\nconst USER_ACTIVITY_EVENTS = [\n  'mousedown', 'mousemove', 'keydown', \n  'scroll', 'touchstart', 'click'\n];\n\n// Global state\nlet inactivityTimer = null;\nlet warningTimer = null;\nlet warningCallback = null;\nlet logoutCallback = null;\nlet isWarningShown = false;\nlet warningTimeout = 0;\nlet isInitialized = false;\n\n// Utility to reset timers\nconst resetInactivityTimer = () => {\n  console.log('[InactivityTracker] Resetting inactivity timer');\n  \n  // Clear existing timers\n  if (inactivityTimer) {\n    clearTimeout(inactivityTimer);\n  }\n  \n  // Don't reset warning timer if warning is showing\n  if (isWarningShown) {\n    console.log('[InactivityTracker] Warning is showing, not resetting warning timer');\n    return;\n  }\n  \n  // Clear warning timer\n  if (warningTimer) {\n    clearTimeout(warningTimer);\n  }\n  \n  // Hide warning if it's showing\n  if (isWarningShown) {\n    isWarningShown = false;\n    if (warningCallback) {\n      warningCallback(false, 0);\n    }\n  }\n  \n  // Set new inactivity timer\n  inactivityTimer = setTimeout(() => {\n    console.log('[InactivityTracker] Inactivity detected! Showing warning...');\n    \n    // Show warning\n    isWarningShown = true;\n    warningTimeout = Date.now() + WARNING_DURATION;\n    \n    if (warningCallback) {\n      warningCallback(true, warningTimeout);\n    }\n    \n    // Set warning timer\n    warningTimer = setTimeout(() => {\n      console.log('[InactivityTracker] Warning timeout expired! Logging out...');\n      \n      // Reset state\n      isWarningShown = false;\n      \n      // Execute logout callback\n      if (logoutCallback) {\n        logoutCallback();\n      }\n    }, WARNING_DURATION);\n    \n  }, INACTIVITY_TIMEOUT);\n};\n\n// User activity event handler\nconst handleUserActivity = () => {\n  console.log('[InactivityTracker] Activity detected');\n  \n  // Only reset if warning is not showing\n  if (!isWarningShown) {\n    resetInactivityTimer();\n  }\n};\n\n// Initialize the tracker\nexport const initInactivityTracker = (onWarning, onLogout) => {\n  console.log('[InactivityTracker] Initializing inactivity tracker');\n  \n  // Only initialize once\n  if (isInitialized) {\n    console.log('[InactivityTracker] Already initialized, updating callbacks');\n    warningCallback = onWarning;\n    logoutCallback = onLogout;\n    return;\n  }\n  \n  // Store callbacks\n  warningCallback = onWarning;\n  logoutCallback = onLogout;\n  \n  // Register all event listeners\n  USER_ACTIVITY_EVENTS.forEach(eventType => {\n    console.log(`[InactivityTracker] Adding event listener for: ${eventType}`);\n    window.addEventListener(eventType, handleUserActivity, { passive: true });\n  });\n  \n  // Initial timer setup\n  resetInactivityTimer();\n  \n  // Mark as initialized\n  isInitialized = true;\n  \n  console.log('[InactivityTracker] Initialization complete');\n};\n\n// Clean up the tracker\nexport const cleanupInactivityTracker = () => {\n  console.log('[InactivityTracker] Cleaning up inactivity tracker');\n  \n  // Remove event listeners\n  USER_ACTIVITY_EVENTS.forEach(eventType => {\n    window.removeEventListener(eventType, handleUserActivity);\n  });\n  \n  // Clear timers\n  if (inactivityTimer) {\n    clearTimeout(inactivityTimer);\n    inactivityTimer = null;\n  }\n  \n  if (warningTimer) {\n    clearTimeout(warningTimer);\n    warningTimer = null;\n  }\n  \n  // Reset state\n  isWarningShown = false;\n  warningCallback = null;\n  logoutCallback = null;\n  isInitialized = false;\n  \n  console.log('[InactivityTracker] Cleanup complete');\n};\n\n// Continue session (dismiss warning)\nexport const continueSession = () => {\n  console.log('[InactivityTracker] Continuing session');\n  \n  isWarningShown = false;\n  \n  if (warningCallback) {\n    warningCallback(false, 0);\n  }\n  \n  resetInactivityTimer();\n};\n\n// For testing purposes\nexport const forceShowWarning = () => {\n  console.log('[InactivityTracker] Forcing warning display (test)');\n  \n  isWarningShown = true;\n  warningTimeout = Date.now() + WARNING_DURATION;\n  \n  if (warningCallback) {\n    warningCallback(true, warningTimeout);\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}