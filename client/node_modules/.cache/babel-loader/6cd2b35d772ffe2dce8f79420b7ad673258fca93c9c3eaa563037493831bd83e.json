{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef, useCallback } from 'react';\n\n// Constants for timeout durations (in milliseconds)\n// For production, use 15 minutes (15 * 60 * 1000) for inactivity timeout\n// For testing purposes, we're using 20 seconds\nconst INACTIVITY_TIMEOUT = 20 * 1000; // 20 seconds for testing\nconst WARNING_DURATION = 60 * 1000; // 60 seconds\n\n// Events to track for user activity\nconst USER_ACTIVITY_EVENTS = ['mousedown', 'mousemove', 'keydown', 'scroll', 'touchstart', 'click'];\n\n// Hook to manage inactivity timeout\nexport const useInactivityTimeout = (isAuthenticated, logout, navigate) => {\n  _s();\n  const [showWarning, setShowWarning] = useState(false);\n  const [warningTime, setWarningTime] = useState(0);\n\n  // Use refs to keep track of timers - refs persist across renders\n  const inactivityTimerRef = useRef(null);\n  const warningTimerRef = useRef(null);\n\n  // Use a ref to track if the component is mounted\n  const isMountedRef = useRef(true);\n\n  // Reset timers - use useCallback to memoize this function\n  const resetTimers = useCallback(() => {\n    console.log('Resetting inactivity timers - isAuthenticated:', isAuthenticated);\n    if (!isMountedRef.current) {\n      console.log('Component not mounted, skipping timer setup');\n      return;\n    }\n    if (!isAuthenticated) {\n      console.log('User not authenticated, skipping timer setup');\n      return;\n    }\n\n    // Clear existing timers\n    if (inactivityTimerRef.current) {\n      console.log('Clearing existing inactivity timer');\n      clearTimeout(inactivityTimerRef.current);\n      inactivityTimerRef.current = null;\n    }\n    if (warningTimerRef.current) {\n      console.log('Clearing existing warning timer');\n      clearTimeout(warningTimerRef.current);\n      warningTimerRef.current = null;\n    }\n    setShowWarning(false);\n\n    // Set a new inactivity timer\n    console.log(`Setting inactivity timer for ${INACTIVITY_TIMEOUT / 1000} seconds`);\n    inactivityTimerRef.current = setTimeout(() => {\n      if (!isMountedRef.current) {\n        console.log('Component unmounted during timeout, aborting');\n        return;\n      }\n      console.log('Inactivity detected! Showing warning...');\n      setShowWarning(true);\n      const expiryTime = Date.now() + WARNING_DURATION;\n      setWarningTime(expiryTime);\n      console.log(`Warning will expire at: ${new Date(expiryTime).toLocaleTimeString()}`);\n\n      // Set warning timer for auto-logout\n      console.log(`Setting warning timer for ${WARNING_DURATION / 1000} seconds`);\n      warningTimerRef.current = setTimeout(() => {\n        if (!isMountedRef.current) {\n          console.log('Component unmounted during warning, aborting');\n          return;\n        }\n        console.log('Warning timeout expired! Logging out...');\n        handleLogout();\n      }, WARNING_DURATION);\n    }, INACTIVITY_TIMEOUT);\n  }, [isAuthenticated]);\n\n  // Handle logout action\n  const handleLogout = useCallback(() => {\n    if (!isMountedRef.current) return;\n    console.log('Logout triggered by inactivity');\n    if (logout) {\n      logout();\n      setShowWarning(false);\n      if (navigate) navigate('/login');\n    }\n  }, [logout, navigate]);\n\n  // Continue the session\n  const continueSession = useCallback(() => {\n    console.log('Session continued by user');\n    resetTimers();\n  }, [resetTimers]);\n\n  // Set up event listeners\n  useEffect(() => {\n    if (!isAuthenticated) return;\n    console.log('Setting up inactivity timeout system');\n    isMountedRef.current = true;\n\n    // User activity event handler\n    const handleUserActivity = () => {\n      if (!isMountedRef.current) return;\n      console.log('User activity detected - event triggered');\n\n      // Only reset timers if the warning isn't showing\n      if (!showWarning) {\n        resetTimers();\n      } else {\n        console.log('Warning is showing, not resetting timers');\n      }\n    };\n\n    // Register all event listeners\n    USER_ACTIVITY_EVENTS.forEach(eventType => {\n      console.log(`Adding event listener for: ${eventType}`);\n      window.addEventListener(eventType, handleUserActivity, {\n        passive: true\n      });\n    });\n\n    // Create a manual test timeout to verify the timer functionality\n    console.log('Setting up a test timeout for verification (5 seconds)');\n    const testTimeout = setTimeout(() => {\n      console.log('TEST TIMEOUT TRIGGERED - This verifies setTimeout works correctly');\n    }, 5000);\n\n    // Force first timer reset\n    console.log('Forcing initial timer setup');\n    resetTimers();\n\n    // Force another timer reset after a short delay (in case something else is interfering)\n    const secondarySetupTimer = setTimeout(() => {\n      console.log('Secondary timer setup (in case of race condition)');\n      resetTimers();\n    }, 2000);\n\n    // Cleanup function\n    return () => {\n      console.log('Cleaning up inactivity timeout system');\n      isMountedRef.current = false;\n\n      // Remove event listeners\n      USER_ACTIVITY_EVENTS.forEach(eventType => {\n        console.log(`Removing event listener for: ${eventType}`);\n        window.removeEventListener(eventType, handleUserActivity);\n      });\n\n      // Clear timers\n      if (inactivityTimerRef.current) {\n        console.log('Clearing main inactivity timer during cleanup');\n        clearTimeout(inactivityTimerRef.current);\n        inactivityTimerRef.current = null;\n      }\n      if (warningTimerRef.current) {\n        console.log('Clearing warning timer during cleanup');\n        clearTimeout(warningTimerRef.current);\n        warningTimerRef.current = null;\n      }\n      clearTimeout(testTimeout);\n      clearTimeout(secondarySetupTimer);\n    };\n  }, [isAuthenticated, resetTimers, showWarning]);\n  return {\n    showWarning,\n    warningTime,\n    continueSession,\n    handleLogout\n  };\n};\n_s(useInactivityTimeout, \"1943MafmBqY3i4uRJ1JaJz27+eA=\");","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","INACTIVITY_TIMEOUT","WARNING_DURATION","USER_ACTIVITY_EVENTS","useInactivityTimeout","isAuthenticated","logout","navigate","_s","showWarning","setShowWarning","warningTime","setWarningTime","inactivityTimerRef","warningTimerRef","isMountedRef","resetTimers","console","log","current","clearTimeout","setTimeout","expiryTime","Date","now","toLocaleTimeString","handleLogout","continueSession","handleUserActivity","forEach","eventType","window","addEventListener","passive","testTimeout","secondarySetupTimer","removeEventListener"],"sources":["/Users/brandonhughes/Construction-Scheduler/client/src/services/timeout.service.js"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from 'react';\n\n// Constants for timeout durations (in milliseconds)\n// For production, use 15 minutes (15 * 60 * 1000) for inactivity timeout\n// For testing purposes, we're using 20 seconds\nconst INACTIVITY_TIMEOUT = 20 * 1000; // 20 seconds for testing\nconst WARNING_DURATION = 60 * 1000; // 60 seconds\n\n// Events to track for user activity\nconst USER_ACTIVITY_EVENTS = [\n  'mousedown', 'mousemove', 'keydown', \n  'scroll', 'touchstart', 'click'\n];\n\n// Hook to manage inactivity timeout\nexport const useInactivityTimeout = (isAuthenticated, logout, navigate) => {\n  const [showWarning, setShowWarning] = useState(false);\n  const [warningTime, setWarningTime] = useState(0);\n  \n  // Use refs to keep track of timers - refs persist across renders\n  const inactivityTimerRef = useRef(null);\n  const warningTimerRef = useRef(null);\n  \n  // Use a ref to track if the component is mounted\n  const isMountedRef = useRef(true);\n  \n  // Reset timers - use useCallback to memoize this function\n  const resetTimers = useCallback(() => {\n    console.log('Resetting inactivity timers - isAuthenticated:', isAuthenticated);\n    \n    if (!isMountedRef.current) {\n      console.log('Component not mounted, skipping timer setup');\n      return;\n    }\n    \n    if (!isAuthenticated) {\n      console.log('User not authenticated, skipping timer setup');\n      return;\n    }\n    \n    // Clear existing timers\n    if (inactivityTimerRef.current) {\n      console.log('Clearing existing inactivity timer');\n      clearTimeout(inactivityTimerRef.current);\n      inactivityTimerRef.current = null;\n    }\n    \n    if (warningTimerRef.current) {\n      console.log('Clearing existing warning timer');\n      clearTimeout(warningTimerRef.current);\n      warningTimerRef.current = null;\n    }\n    \n    setShowWarning(false);\n    \n    // Set a new inactivity timer\n    console.log(`Setting inactivity timer for ${INACTIVITY_TIMEOUT/1000} seconds`);\n    inactivityTimerRef.current = setTimeout(() => {\n      if (!isMountedRef.current) {\n        console.log('Component unmounted during timeout, aborting');\n        return;\n      }\n      \n      console.log('Inactivity detected! Showing warning...');\n      setShowWarning(true);\n      const expiryTime = Date.now() + WARNING_DURATION;\n      setWarningTime(expiryTime);\n      console.log(`Warning will expire at: ${new Date(expiryTime).toLocaleTimeString()}`);\n      \n      // Set warning timer for auto-logout\n      console.log(`Setting warning timer for ${WARNING_DURATION/1000} seconds`);\n      warningTimerRef.current = setTimeout(() => {\n        if (!isMountedRef.current) {\n          console.log('Component unmounted during warning, aborting');\n          return;\n        }\n        \n        console.log('Warning timeout expired! Logging out...');\n        handleLogout();\n      }, WARNING_DURATION);\n    }, INACTIVITY_TIMEOUT);\n  }, [isAuthenticated]);\n  \n  // Handle logout action\n  const handleLogout = useCallback(() => {\n    if (!isMountedRef.current) return;\n    \n    console.log('Logout triggered by inactivity');\n    if (logout) {\n      logout();\n      setShowWarning(false);\n      if (navigate) navigate('/login');\n    }\n  }, [logout, navigate]);\n  \n  // Continue the session\n  const continueSession = useCallback(() => {\n    console.log('Session continued by user');\n    resetTimers();\n  }, [resetTimers]);\n  \n  // Set up event listeners\n  useEffect(() => {\n    if (!isAuthenticated) return;\n    \n    console.log('Setting up inactivity timeout system');\n    isMountedRef.current = true;\n    \n    // User activity event handler\n    const handleUserActivity = () => {\n      if (!isMountedRef.current) return;\n      \n      console.log('User activity detected - event triggered');\n      \n      // Only reset timers if the warning isn't showing\n      if (!showWarning) {\n        resetTimers();\n      } else {\n        console.log('Warning is showing, not resetting timers');\n      }\n    };\n    \n    // Register all event listeners\n    USER_ACTIVITY_EVENTS.forEach(eventType => {\n      console.log(`Adding event listener for: ${eventType}`);\n      window.addEventListener(eventType, handleUserActivity, { passive: true });\n    });\n    \n    // Create a manual test timeout to verify the timer functionality\n    console.log('Setting up a test timeout for verification (5 seconds)');\n    const testTimeout = setTimeout(() => {\n      console.log('TEST TIMEOUT TRIGGERED - This verifies setTimeout works correctly');\n    }, 5000);\n    \n    // Force first timer reset\n    console.log('Forcing initial timer setup');\n    resetTimers();\n    \n    // Force another timer reset after a short delay (in case something else is interfering)\n    const secondarySetupTimer = setTimeout(() => {\n      console.log('Secondary timer setup (in case of race condition)');\n      resetTimers();\n    }, 2000);\n    \n    // Cleanup function\n    return () => {\n      console.log('Cleaning up inactivity timeout system');\n      isMountedRef.current = false;\n      \n      // Remove event listeners\n      USER_ACTIVITY_EVENTS.forEach(eventType => {\n        console.log(`Removing event listener for: ${eventType}`);\n        window.removeEventListener(eventType, handleUserActivity);\n      });\n      \n      // Clear timers\n      if (inactivityTimerRef.current) {\n        console.log('Clearing main inactivity timer during cleanup');\n        clearTimeout(inactivityTimerRef.current);\n        inactivityTimerRef.current = null;\n      }\n      \n      if (warningTimerRef.current) {\n        console.log('Clearing warning timer during cleanup');\n        clearTimeout(warningTimerRef.current);\n        warningTimerRef.current = null;\n      }\n      \n      clearTimeout(testTimeout);\n      clearTimeout(secondarySetupTimer);\n    };\n  }, [isAuthenticated, resetTimers, showWarning]);\n  \n  return {\n    showWarning,\n    warningTime,\n    continueSession,\n    handleLogout\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}